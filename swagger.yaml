openapi: 3.0.0
info:
  description: hackU vscode拡張機能 バックエンドAPI仕様書
  version: 1.0.0
  title: working record API
servers:
  - url: 'http://localhost:8880'
    description: Development Server
tags:
  - name: user
    description: Operations about user
paths:
  /user:
    get:
      tags:
        - user
      summary: ユーザー情報取得
      description: ユーザーの情報を取得
      parameters:
        - name: userUid
          in: query
          description: ユーザーID
          required: true
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - user
      summary: ユーザー情報登録
      description: ユーザーの情報を登録
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userUid:
                  description: ユーザーID
                  type: string
                  example: xWDG67WKXjROfE22eMEOd7rvYU12
                userName:
                  description: ユーザー名
                  type: string
                  example: テストユーザー
                email:
                  description: メールアドレス
                  type: string
                  example: testuser@sample.com
                imageUrl:
                  description: 画像URL
                  type: string
                  example: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    patch:
      security:
        - Bearer: []
      tags:
        - user
      summary: ユーザー情報を更新
      description: ユーザーの情報を更新
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userUid:
                  description: ユーザーID
                  type: string
                  example: xWDG67WKXjROfE22eMEOd7rvYU12
                userName:
                  description: ユーザー名
                  type: string
                  example: テストユーザー
                email:
                  description: メールアドレス
                  type: string
                  example: testuser@creamy.com
                imageUrl:
                  description: 画像URL
                  type: string
                  example: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /group:
    get:
      tags:
        - group
      summary: グループ一覧取得
      description: ユーザーの所属するグループ一覧を取得
      parameters:
        - name: userUid
          in: query
          description: ユーザーID
          required: true
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - group
      summary: 新規グループ作成
      description: ユーザーがオーナーの新規ルーム作成
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userUid:
                  description: ユーザーID
                  type: string
                  example: xWDG67WKXjROfE22eMEOd7rvYU12
                groupName:
                  description: グループ名
                  type: string
                  example: プログラミング同好会
                members:
                  description: グループ招待ユーザ
                  type: array
                  items:
                    type: object
                    properties:
                      userUid:
                        description: ユーザーID
                        type: string
                        example: aaa111
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /project:
    get:
      tags:
        - project
      summary: プロジェクト取得
      description: ユーザーのプロジェクト一覧を取得
      parameters:
        - name: userUid
          in: query
          description: ユーザーID
          required: true
          type: string
          example: xWDG67WKXjROfE22eMEOd7rvYU12
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - project
      summary: プロジェクト登録
      description: ユーザーのプロジェクトを登録
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userUid:
                  description: ユーザーID
                  type: string
                  example: xWDG67WKXjROfE22eMEOd7rvYU12
                projectName:
                  description: プロジェクト名
                  type: string
                  example: test_project
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    patch:
      tags:
        - project
      summary: プロジェクト名変更
      description: ユーザーのプロジェクト名を変更
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userUid:
                  description: ユーザーID
                  type: string
                  example: xWDG67WKXjROfE22eMEOd7rvYU12
                projectName:
                  description: 変更前のプロジェクト名
                  type: string
                  example: test_project
                changeProjectName:
                  description: 変更後のプロジェクト名
                  type: string
                  example: testProject
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /project/work:
    get:
      tags:
        - project
      summary: プロジェクト内の作業時間を取得
      description: ユーザーのプロジェクトのフォルダ・ファイルごとの作業時間一覧を取得
      parameters:
        - name: userUid
          in: query
          description: ユーザーID
          required: true
          type: string
          example: xWDG67WKXjROfE22eMEOd7rvYU12
        - name: projectName
          in: query
          description: プロジェクト名
          type: string
          example: test_project
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectWork'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /folder:
    post:
      tags:
        - folder
      summary: フォルダ登録
      description: ユーザのプロジェクトにpathのフォルダを登録
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userUid:
                  description: ユーザーID
                  type: string
                  example: xWDG67WKXjROfE22eMEOd7rvYU12
                path:
                  description: パス
                  type: string
                  example: /test_project/test_folder/
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    patch:
      tags:
        - folder
      summary: フォルダ名変更
      description: ユーザーのpathのフォルダ名を変更
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userUid:
                  description: ユーザーID
                  type: string
                  example: xWDG67WKXjROfE22eMEOd7rvYU12
                path:
                  description: 変更前のフォルダへのパス
                  type: string
                  example: /test_project/test_folder/
                changeFolderName:
                  description: 変更後のフォルダ名
                  type: string
                  example: testFolder
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /folder/work:
    get:
      tags:
        - folder
      summary: フォルダ内の作業時間を取得
      description: ユーザーのフォルダ内のファイルごとの作業時間一覧を取得
      parameters:
        - name: userUid
          in: query
          description: ユーザーID
          required: true
          type: string
          example: xWDG67WKXjROfE22eMEOd7rvYU12
        - name: path
          in: query
          description: フォルダパス
          type: string
          example: /test_project/test_folder/
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Folder'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /file:
    post:
      tags:
        - file
      summary: ファイル登録
      description: ユーザのプロジェクトにpathのファイルを登録
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userUid:
                  description: ユーザーID
                  type: string
                  example: xWDG67WKXjROfE22eMEOd7rvYU12
                path:
                  description: パス
                  type: string
                  example: /test_project/test_folder/test.go
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    patch:
      tags:
        - file
      summary: ファイル名変更
      description: ユーザーのpathのファイル名を変更
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userUid:
                  description: ユーザーID
                  type: string
                  example: xWDG67WKXjROfE22eMEOd7rvYU12
                path:
                  description: 変更前のフォルダへのパス
                  type: string
                  example: /test_project/test_folder/test.go
                changeFileName:
                  description: 変更後のファイル名
                  type: string
                  example: main.go
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /file/work:
    get:
      tags:
        - file
      summary: ファイルの作業時間を取得
      description: ユーザーのファイルの作業ごとの作業時間一覧を取得
      parameters:
        - name: userUid
          in: query
          description: ユーザーID
          required: true
          type: string
          example: xWDG67WKXjROfE22eMEOd7rvYU12
        - name: path
          in: query
          description: フォルダパス
          type: string
          example: /test_project/main.go
      responses:
        '200':
          content:
            application/json:
              schema: null
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /work/start:
    post:
      tags:
        - work
      summary: 作業開始
      description: ユーザのファイルの作業開始時刻を登録
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userUid:
                  description: ユーザーID
                  type: string
                  example: xWDG67WKXjROfE22eMEOd7rvYU12
                path:
                  description: パス
                  type: string
                  example: /test_project/main.go
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /work/end:
    post:
      tags:
        - work
      summary: 作業終了
      description: ユーザのファイルの作業終了時刻を登録
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userUid:
                  description: ユーザーID
                  type: string
                  example: xWDG67WKXjROfE22eMEOd7rvYU12
                path:
                  description: パス
                  type: string
                  example: /test_project/main.go
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      description: Credentials or access token for API
  schemas:
    User:
      description: ユーザー
      type: object
      properties:
        userUid:
          description: ユーザーID
          type: string
          example: xWDG67WKXjROfE22eMEOd7rvYU12
        userName:
          description: ユーザー名
          type: string
          example: パンダ
        email:
          description: メールアドレス
          type: string
          example: fff@fff.com
        imageUrl:
          description: 画像URL
          type: string
          example: ''
        createdAt:
          description: 作成日
          type: string
          example: '2021-08-22T19:42:16.058+09:00'
        updatedAt:
          description: 更新日
          type: string
          example: '2021-08-22T19:42:16.058+09:00'
        deletedAt:
          description: 削除日
          type: string
          example: '2021-08-22T19:42:16.058+09:00'
    Error:
      description: エラー
      type: object
      properties:
        status:
          description: エラーコード
          type: number
          example: 401
        message:
          description: エラーメッセージ
          type: string
          example: Unauthorized
    Project:
      description: プロジェクト
      type: object
      properties:
        projectId:
          description: プロジェクトID
          type: number
          example: 1
        projectName:
          description: プロジェクト名
          type: string
          example: test_project
        workTime:
          description: 作業時間(h)
          type: number
          example: 3.5
    FolderWork:
      description: フォルダ
      type: object
      properties:
        folderId:
          description: フォルダID
          type: number
          example: 1
        folderName:
          description: フォルダ名
          type: string
          example: test_folder
        folderPath:
          description: フォルダパス
          type: string
          example: /test_folder/
        workTime:
          description: 作業時間
          type: number
          example: 2
        files:
          description: ファイル一覧
          type: array
          items:
            $ref: '#components/schemas/FileWork'
        folders:
          description: フォルダ一覧
          type: array
          items:
            $ref: '#components/schemas/FolderWork'
    ProjectWork:
      description: プロジェクト内の作業時間
      type: object
      properties:
        projectId:
          description: プロジェクトID
          type: number
          example: 1
        projectName:
          description: プロジェクト名
          type: string
          example: test_project
        workTime:
          description: 作業時間(h)
          type: number
          example: 3.5
        folders:
          description: フォルダ一覧
          type: array
          items:
            $ref: '#components/schemas/FolderWork'
    FileWork:
      description: ファイルの作業時間
      type: object
      properties:
        fileId:
          description: ファイルID
          type: number
          example: 1
        fileName:
          description: ファイル名
          type: string
          example: test_file
        workTime:
          description: 作業時間
          type: number
          example: 1.2
    WorkDetail:
      description: 作業詳細情報
      type: object
      properties:
        workId:
          description: ワークID
          type: number
          example: 1
        startedAt:
          description: 作業開始時刻
          type: string
          example: '2021-08-26T18:52:45.952+09:00'
        finishedAt:
          description: 作業終了時刻
          type: string
          example: '2021-08-26T20:52:45.952+09:00'
        workTime:
          description: 作業時間
          type: number
          example: 2
    Work:
      description: ファイル作業情報
      type: object
      properties:
        fileId:
          description: ファイルID
          type: number
          example: 1
        fileName:
          description: ファイル名
          type: string
          example: main.go
        workTime:
          description: 作業時間
          type: number
          example: 3
        works:
          description: 作業詳細一覧
          type: array
          items:
            $ref: '#components/schemas/WorkDetail'
    Group:
      description: グループ情報
      type: object
      properties:
        groupId:
          description: グループID
          type: number
          example: 1
        groupName:
          description: グループ名
          type: string
          example: プログラミング同好会
  responses:
    '200':
      description: 成功
      content:
        application/json:
          example:
            status: 200
            message: success
    '400':
      description: パラメータが不正
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 400
            message: Bad Request
    '401':
      description: 認証失敗
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 401
            message: Unauthorized token
    '404':
      description: データなし
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 404
            message: Data is not found
    '500':
      description: サーバーエラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 500
            message: Server Error
